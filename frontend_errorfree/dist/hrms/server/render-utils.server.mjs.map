{
  "version": 3,
  "sources": ["angular:server-render-utils:angular:server-render-utils"],
  "sourcesContent": ["export { \u0275Console } from '@angular/core';\nexport { renderApplication, renderModule, \u0275SERVER_CONTEXT } from '@angular/platform-server';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ApplicationRef, Compiler, createPlatformFactory, platformCore, \u0275whenStable as whenStable, \u0275Console, } from '@angular/core';\r\nimport { INITIAL_CONFIG, \u0275INTERNAL_SERVER_PLATFORM_PROVIDERS as INTERNAL_SERVER_PLATFORM_PROVIDERS, } from '@angular/platform-server';\r\nimport { Router, \u0275loadChildren as loadChildrenHelper } from '@angular/router';\r\nasync function* getRoutesFromRouterConfig(routes, compiler, parentInjector, parentRoute = '') {\r\n    for (const route of routes) {\r\n        const { path, redirectTo, loadChildren, children } = route;\r\n        if (path === undefined) {\r\n            continue;\r\n        }\r\n        const currentRoutePath = buildRoutePath(parentRoute, path);\r\n        if (redirectTo !== undefined) {\r\n            // TODO: handle `redirectTo`.\r\n            yield { route: currentRoutePath, success: false, redirect: true };\r\n            continue;\r\n        }\r\n        if (/[:*]/.test(path)) {\r\n            // TODO: handle parameterized routes population.\r\n            yield { route: currentRoutePath, success: false, redirect: false };\r\n            continue;\r\n        }\r\n        yield { route: currentRoutePath, success: true, redirect: false };\r\n        if (children?.length) {\r\n            yield* getRoutesFromRouterConfig(children, compiler, parentInjector, currentRoutePath);\r\n        }\r\n        if (loadChildren) {\r\n            const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\r\n            if (loadedChildRoutes) {\r\n                const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\r\n                yield* getRoutesFromRouterConfig(childRoutes, compiler, injector, currentRoutePath);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport async function* extractRoutes(bootstrapAppFnOrModule, document) {\r\n    const platformRef = createPlatformFactory(platformCore, 'server', [\r\n        {\r\n            provide: INITIAL_CONFIG,\r\n            useValue: { document, url: '' },\r\n        },\r\n        {\r\n            provide: \u0275Console,\r\n            /** An Angular Console Provider that does not print a set of predefined logs. */\r\n            useFactory: () => {\r\n                class Console extends \u0275Console {\r\n                    ignoredLogs = new Set(['Angular is running in development mode.']);\r\n                    log(message) {\r\n                        if (!this.ignoredLogs.has(message)) {\r\n                            super.log(message);\r\n                        }\r\n                    }\r\n                }\r\n                return new Console();\r\n            },\r\n        },\r\n        ...INTERNAL_SERVER_PLATFORM_PROVIDERS,\r\n    ])();\r\n    try {\r\n        let applicationRef;\r\n        if (isBootstrapFn(bootstrapAppFnOrModule)) {\r\n            applicationRef = await bootstrapAppFnOrModule();\r\n        }\r\n        else {\r\n            const moduleRef = await platformRef.bootstrapModule(bootstrapAppFnOrModule);\r\n            applicationRef = moduleRef.injector.get(ApplicationRef);\r\n        }\r\n        // Wait until the application is stable.\r\n        await whenStable(applicationRef);\r\n        const injector = applicationRef.injector;\r\n        const router = injector.get(Router);\r\n        if (router.config.length === 0) {\r\n            // In case there are no routes available\r\n            yield { route: '', success: true, redirect: false };\r\n        }\r\n        else {\r\n            const compiler = injector.get(Compiler);\r\n            // Extract all the routes from the config.\r\n            yield* getRoutesFromRouterConfig(router.config, compiler, injector);\r\n        }\r\n    }\r\n    finally {\r\n        platformRef.destroy();\r\n    }\r\n}\r\nfunction isBootstrapFn(value) {\r\n    // We can differentiate between a module and a bootstrap function by reading compiler-generated `\u0275mod` static property:\r\n    return typeof value === 'function' && !('\u0275mod' in value);\r\n}\r\nfunction buildRoutePath(...routeParts) {\r\n    return routeParts.filter(Boolean).join('/');\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAYA,SAAgB,0BAA0B,QAAQ,UAAU,gBAAgB,cAAc,IAAI;AAAA;AAC1F,eAAW,SAAS,QAAQ;AACxB,YAAM,EAAE,MAAM,YAAY,cAAAA,eAAc,SAAS,IAAI;AACrD,UAAI,SAAS,QAAW;AACpB;AAAA,MACJ;AACA,YAAM,mBAAmB,eAAe,aAAa,IAAI;AACzD,UAAI,eAAe,QAAW;AAE1B,cAAM,EAAE,OAAO,kBAAkB,SAAS,OAAO,UAAU,KAAK;AAChE;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,IAAI,GAAG;AAEnB,cAAM,EAAE,OAAO,kBAAkB,SAAS,OAAO,UAAU,MAAM;AACjE;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,kBAAkB,SAAS,MAAM,UAAU,MAAM;AAChE,UAAI,UAAU,QAAQ;AAClB,2BAAO,0BAA0B,UAAU,UAAU,gBAAgB,gBAAgB;AAAA,MACzF;AACA,UAAIA,eAAc;AACd,cAAM,oBAAoB,kBAAM,aAAmB,OAAO,UAAU,cAAc,EAAE,UAAU;AAC9F,YAAI,mBAAmB;AACnB,gBAAM,EAAE,QAAQ,aAAa,WAAW,eAAe,IAAI;AAC3D,6BAAO,0BAA0B,aAAa,UAAU,UAAU,gBAAgB;AAAA,QACtF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AACA,SAAuB,cAAc,wBAAwB,UAAU;AAAA;AACnE,UAAM,cAAc,sBAAsB,cAAc,UAAU;AAAA,MAC9D;AAAA,QACI,SAAS;AAAA,QACT,UAAU,EAAE,UAAU,KAAK,GAAG;AAAA,MAClC;AAAA,MACA;AAAA,QACI,SAAS;AAAA;AAAA,QAET,YAAY,MAAM;AAAA,UACd,MAAMC,iBAAgB,QAAS;AAAA,YAC3B,cAAc,oBAAI,IAAI,CAAC,yCAAyC,CAAC;AAAA,YACjE,IAAI,SAAS;AACT,kBAAI,CAAC,KAAK,YAAY,IAAI,OAAO,GAAG;AAChC,sBAAM,IAAI,OAAO;AAAA,cACrB;AAAA,YACJ;AAAA,UACJ;AACA,iBAAO,IAAIA,SAAQ;AAAA,QACvB;AAAA,MACJ;AAAA,MACA,GAAG;AAAA,IACP,CAAC,EAAE;AACH,QAAI;AACA,UAAI;AACJ,UAAI,cAAc,sBAAsB,GAAG;AACvC,yBAAiB,kBAAM,uBAAuB;AAAA,MAClD,OACK;AACD,cAAM,YAAY,kBAAM,YAAY,gBAAgB,sBAAsB;AAC1E,yBAAiB,UAAU,SAAS,IAAI,cAAc;AAAA,MAC1D;AAEA,wBAAM,WAAW,cAAc;AAC/B,YAAM,WAAW,eAAe;AAChC,YAAM,SAAS,SAAS,IAAI,MAAM;AAClC,UAAI,OAAO,OAAO,WAAW,GAAG;AAE5B,cAAM,EAAE,OAAO,IAAI,SAAS,MAAM,UAAU,MAAM;AAAA,MACtD,OACK;AACD,cAAM,WAAW,SAAS,IAAI,QAAQ;AAEtC,2BAAO,0BAA0B,OAAO,QAAQ,UAAU,QAAQ;AAAA,MACtE;AAAA,IACJ,UACA;AACI,kBAAY,QAAQ;AAAA,IACxB;AAAA,EACJ;AAAA;AACA,SAAS,cAAc,OAAO;AAE1B,SAAO,OAAO,UAAU,cAAc,EAAE,eAAU;AACtD;AACA,SAAS,kBAAkB,YAAY;AACnC,SAAO,WAAW,OAAO,OAAO,EAAE,KAAK,GAAG;AAC9C;",
  "names": ["loadChildren", "Console"]
}
